# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models
from jsonfield import JSONField
import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
import django.core.validators
import ui.models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0006_require_contenttypes_0002'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(null=True, verbose_name='last login', blank=True)),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, max_length=30, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.', 'invalid')], help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', unique=True, verbose_name='username')),
                ('first_name', models.CharField(max_length=30, verbose_name='first name', blank=True)),
                ('last_name', models.CharField(max_length=30, verbose_name='last name', blank=True)),
                ('email', models.EmailField(max_length=254, verbose_name='email address', blank=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('local_id', models.CharField(default=b'', help_text=b'Local identifier', max_length=255, blank=True)),
                ('groups', models.ManyToManyField(related_query_name='user', related_name='user_set', to='auth.Group', blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(related_query_name='user', related_name='user_set', to='auth.Permission', blank=True, help_text='Specific permissions for this user.', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('collection_id', models.CharField(default=ui.models.default_uuid, unique=True, max_length=32)),
                ('harvest_type', models.CharField(max_length=255, choices=[(b'twitter_search', b'Twitter search'), (b'twitter_filter', b'Twitter filter'), (b'twitter_user_timeline', b'Twitter user timeline'), (b'twitter_sample', b'Twitter sample'), (b'flickr_user', b'Flickr user'), (b'weibo_timeline', b'Weibo timeline')])),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=False)),
                ('schedule_minutes', models.PositiveIntegerField(default=10080, null=True, verbose_name=b'schedule', choices=[(30, b'Every 30 minutes'), (60, b'Every hour'), (240, b'Every 4 hours'), (720, b'Every 12 hours'), (1440, b'Every day'), (10080, b'Every week'), (40320, b'Every 4 weeks')])),
                ('harvest_options', models.TextField(blank=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('end_date', models.DateTimeField(help_text=b'If blank, will continue until stopped.', null=True, blank=True)),
                ('history_note', models.TextField(blank=True)),
            ],
            options={
                'diff_fields': ('collection_set', 'credential', 'harvest_type', 'name', 'description', 'is_active', 'schedule_minutes', 'harvest_options', 'end_date'),
            },
        ),
        migrations.CreateModel(
            name='CollectionSet',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('collection_set_id', models.CharField(default=ui.models.default_uuid, unique=True, max_length=32)),
                ('name', models.CharField(max_length=255, verbose_name=b'Collection set name')),
                ('description', models.TextField(blank=True)),
                ('is_visible', models.BooleanField(default=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('history_note', models.TextField(blank=True)),
                ('group', models.ForeignKey(related_name='collection_sets', to='auth.Group', on_delete=models.CASCADE)),
            ],
            options={
                'diff_fields': ('group', 'name', 'description'),
            },
        ),
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('platform', models.CharField(help_text=b'Platform name', max_length=255, choices=[(b'twitter', b'Twitter'), (b'flickr', b'Flickr'), (b'weibo', b'Weibo')])),
                ('token', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('history_note', models.TextField(blank=True)),
                ('user', models.ForeignKey(related_name='credentials', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),
            ],
            options={
                'diff_fields': ('name', 'platform', 'token', 'is_active'),
            },
        ),
        migrations.CreateModel(
            name='Export',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('export_id', models.CharField(default=ui.models.default_uuid, unique=True, max_length=32)),
                ('export_type', models.CharField(max_length=255)),
                ('export_format', models.CharField(default=b'csv', max_length=10, choices=[(b'csv', b'Comma separated values (CSV)'), (b'tsv', b'Tab separated values (TSV)'), (b'html', b'HTML'), (b'xlsx', b'Excel (XLSX)'), (b'json', b'JSON of limited fields'), (b'json_full', b'Full JSON'), (b'dehydrate', b'Text file of identifiers (dehydrate)')])),
                ('status', models.CharField(default=b'not requested', max_length=20, choices=[(b'not requested', b'Not requested'), (b'requested', b'Requested'), (b'completed success', b'Success'), (b'completed failure', b'Failure')])),
                ('path', models.TextField(blank=True)),
                ('date_requested', models.DateTimeField(null=True, blank=True)),
                ('date_started', models.DateTimeField(null=True, blank=True)),
                ('date_ended', models.DateTimeField(null=True, blank=True)),
                ('dedupe', models.BooleanField(default=False)),
                ('item_date_start', models.DateTimeField(null=True, blank=True)),
                ('item_date_end', models.DateTimeField(null=True, blank=True)),
                ('harvest_date_start', models.DateTimeField(null=True, blank=True)),
                ('harvest_date_end', models.DateTimeField(null=True, blank=True)),
                ('infos', JSONField(default=dict, blank=True)),
                ('warnings', JSONField(default=dict, blank=True)),
                ('errors', JSONField(default=dict, blank=True)),
                ('collection', models.ForeignKey(blank=True, to='ui.Collection', null=True, on_delete=models.CASCADE)),
            ],
        ),
        migrations.CreateModel(
            name='Harvest',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('harvest_id', models.CharField(default=ui.models.default_uuid, unique=True, max_length=32)),
                ('harvest_type', models.CharField(max_length=255)),
                ('status', models.CharField(default=b'requested', max_length=20, choices=[(b'requested', b'Requested'), (b'completed success', b'Success'), (b'completed failure', b'Failure'), (b'running', b'Running'), (b'stop requested', b'Stop requested')])),
                ('date_requested', models.DateTimeField(default=django.utils.timezone.now, blank=True)),
                ('date_started', models.DateTimeField(db_index=True, null=True, blank=True)),
                ('date_ended', models.DateTimeField(null=True, blank=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('infos', JSONField(default=dict, blank=True)),
                ('warnings', JSONField(default=dict, blank=True)),
                ('errors', JSONField(default=dict, blank=True)),
                ('token_updates', JSONField(default=dict, blank=True)),
                ('uids', JSONField(default=dict, blank=True)),
                ('warcs_count', models.PositiveIntegerField(default=0)),
                ('warcs_bytes', models.BigIntegerField(default=0)),
                ('collection', models.ForeignKey(related_name='harvests', to='ui.Collection', on_delete=models.CASCADE)),
            ],
        ),
        migrations.CreateModel(
            name='HarvestStat',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('harvest_date', models.DateField()),
                ('item', models.CharField(max_length=255)),
                ('count', models.PositiveIntegerField()),
                ('harvest', models.ForeignKey(related_name='harvest_stats', to='ui.Harvest', on_delete=models.CASCADE)),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalCollection',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('collection_id', models.CharField(default=ui.models.default_uuid, max_length=32, db_index=True)),
                ('harvest_type', models.CharField(max_length=255, choices=[(b'twitter_search', b'Twitter search'), (b'twitter_filter', b'Twitter filter'), (b'twitter_user_timeline', b'Twitter user timeline'), (b'twitter_sample', b'Twitter sample'), (b'flickr_user', b'Flickr user'), (b'weibo_timeline', b'Weibo timeline')])),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=False)),
                ('schedule_minutes', models.PositiveIntegerField(default=10080, null=True, verbose_name=b'schedule', choices=[(30, b'Every 30 minutes'), (60, b'Every hour'), (240, b'Every 4 hours'), (720, b'Every 12 hours'), (1440, b'Every day'), (10080, b'Every week'), (40320, b'Every 4 weeks')])),
                ('harvest_options', models.TextField(blank=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(editable=False, blank=True)),
                ('end_date', models.DateTimeField(help_text=b'If blank, will continue until stopped.', null=True, blank=True)),
                ('history_note', models.TextField(blank=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('collection_set', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='ui.CollectionSet', null=True)),
                ('credential', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='ui.Credential', null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical collection',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCollectionSet',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('collection_set_id', models.CharField(default=ui.models.default_uuid, max_length=32, db_index=True)),
                ('name', models.CharField(max_length=255, verbose_name=b'Collection set name')),
                ('description', models.TextField(blank=True)),
                ('is_visible', models.BooleanField(default=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(editable=False, blank=True)),
                ('history_note', models.TextField(blank=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('group', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='auth.Group', null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical collection set',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCredential',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('name', models.CharField(max_length=255)),
                ('platform', models.CharField(help_text=b'Platform name', max_length=255, choices=[(b'twitter', b'Twitter'), (b'flickr', b'Flickr'), (b'weibo', b'Weibo')])),
                ('token', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(editable=False, blank=True)),
                ('history_note', models.TextField(blank=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
                ('user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical credential',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSeed',
            fields=[
                ('id', models.IntegerField(verbose_name='ID', db_index=True, auto_created=True, blank=True)),
                ('seed_id', models.CharField(default=ui.models.default_uuid, max_length=32, db_index=True)),
                ('token', models.TextField(blank=True)),
                ('uid', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_valid', models.BooleanField(default=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(editable=False, blank=True)),
                ('history_note', models.TextField(blank=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('collection', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='ui.Collection', null=True)),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical seed',
            },
        ),
        migrations.CreateModel(
            name='Seed',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('seed_id', models.CharField(default=ui.models.default_uuid, unique=True, max_length=32)),
                ('token', models.TextField(blank=True)),
                ('uid', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_valid', models.BooleanField(default=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('history_note', models.TextField(blank=True)),
                ('collection', models.ForeignKey(related_name='seeds', to='ui.Collection', on_delete=models.CASCADE)),
            ],
            options={
                'diff_fields': ('token', 'uid', 'is_active'),
            },
        ),
        migrations.CreateModel(
            name='Warc',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('warc_id', models.CharField(unique=True, max_length=32)),
                ('path', models.TextField()),
                ('sha1', models.CharField(max_length=42)),
                ('bytes', models.PositiveIntegerField()),
                ('date_created', models.DateTimeField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('harvest', models.ForeignKey(related_name='warcs', to='ui.Harvest', on_delete=models.CASCADE)),
            ],
        ),
        migrations.AddField(
            model_name='harvest',
            name='historical_collection',
            field=models.ForeignKey(related_name='historical_harvests', to='ui.HistoricalCollection', null=True, on_delete=models.CASCADE),
        ),
        migrations.AddField(
            model_name='harvest',
            name='historical_credential',
            field=models.ForeignKey(related_name='historical_harvests', to='ui.HistoricalCredential', null=True, on_delete=models.CASCADE),
        ),
        migrations.AddField(
            model_name='harvest',
            name='historical_seeds',
            field=models.ManyToManyField(related_name='historical_harvests', to='ui.HistoricalSeed'),
        ),
        migrations.AddField(
            model_name='harvest',
            name='parent_harvest',
            field=models.ForeignKey(related_name='child_harvests', blank=True, to='ui.Harvest', null=True, on_delete=models.CASCADE),
        ),
        migrations.AddField(
            model_name='export',
            name='seeds',
            field=models.ManyToManyField(to='ui.Seed', blank=True),
        ),
        migrations.AddField(
            model_name='export',
            name='user',
            field=models.ForeignKey(related_name='exports', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE),
        ),
        migrations.AddField(
            model_name='collection',
            name='collection_set',
            field=models.ForeignKey(related_name='collections', to='ui.CollectionSet', on_delete=models.CASCADE),
        ),
        migrations.AddField(
            model_name='collection',
            name='credential',
            field=models.ForeignKey(related_name='collections', to='ui.Credential', on_delete=models.CASCADE),
        ),
        migrations.AlterUniqueTogether(
            name='harveststat',
            unique_together=set([('harvest', 'harvest_date', 'item')]),
        ),
    ]
